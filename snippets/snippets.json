{
  "Simple value object": {
    "prefix": "ddd-vo",
    "body": [
      "import { ValueObject } from '@gebittencourt/sdk-jsddd';",
      "",
      "export interface ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface {",
      "\t${1:propertyName}: ${2|string,number,Date,any|};",
      "}",
      "",
      "export class ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} extends ValueObject implements ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface {",
      "\treadonly ${1:propertyName}: ${2|string,number,Date,any|};",
      "",
      "\tprivate constructor(${1:propertyName}: ${2|string,number,Date,any|}) {",
      "\t\tsuper();",
      "\t\tthis.${1:propertyName} = ${1:propertyName};",
      "\t}",
      "",
      "\tstatic of(${1:propertyName}: ${2|string,number,Date,any|}): ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(${1:propertyName});",
      "\t}",
      "",
      "\tstatic from(entity: ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface): ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(entity.${1:propertyName});",
      "\t}",
      "}",
      ""
    ],
    "description": "Generate a simple value object"
  },
  "Simple value object test": {
    "prefix": "ddd-test-vo",
    "body": [
      "import { default as test } from 'ava';",
      "import { ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} } from './${TM_FILENAME_BASE/.spec//gi}';",
      "",
      "test('should instance of', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.of(${2:value});",
      "",
      "\t// then",
      "\tt.is(instance.${1:propertyName}, ${2:value});",
      "});",
      "",
      "test('should instance from interface', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.from({ ${1:propertyName}: ${2:value} });",
      "",
      "\t// then",
      "\tt.is(instance.${1:propertyName}, ${2:value});",
      "});",
      ""
    ],
    "description": "Generate a simple value object test"
  },
  "Identifier": {
    "prefix": "ddd-id",
    "body": [
      "import { ValueObject } from '@gebittencourt/sdk-jsddd';",
      "import { v4 as uuidv4 } from 'uuid';",
      "",
      "export interface ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface {",
      "\tvalue: string;",
      "}",
      "",
      "export class ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} extends ValueObject implements ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface {",
      "\treadonly value: string;",
      "",
      "\tprivate constructor(value: string) {",
      "\t\tsuper();",
      "\t\tthis.value = value;",
      "\t}",
      "",
      "\tstatic of(value: string): ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(value);",
      "\t}",
      "",
      "\tstatic from(entity: ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface): ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(entity.value);",
      "\t}",
      "",
      "\tstatic generate(): ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(uuidv4());",
      "\t}",
      "}",
      ""
    ],
    "description": "Generate a identifier"
  },
  "Identifier test": {
    "prefix": "ddd-test-id",
    "body": [
      "import { default as test } from 'ava';",
      "import { ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} } from './${TM_FILENAME_BASE/.spec//gi}';",
      "",
      "test('should instance of', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.of('uuid');",
      "",
      "\t// then",
      "\tt.is(instance.value, 'uuid');",
      "});",
      "",
      "test('should instance from interface', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.from({ value: 'uuid' });",
      "",
      "\t// then",
      "\tt.is(instance.value, 'uuid');",
      "});",
      "",
      "test('should generate id', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.generate();",
      "",
      "\t// then",
      "\tt.assert(instance);",
      "});",
      ""
    ],
    "description": "Generate a identifier test"
  },
  "Aggregate": {
    "prefix": "ddd-aggregate",
    "body": [
      "import { Aggregate } from '@gebittencourt/sdk-jsddd';",
      "import { ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id, ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}IdInterface } from './${TM_FILENAME_BASE}-id';",
      "",
      "export interface ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface {",
      "\tid: ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}IdInterface;",
      "\t}",
      "",
      "export class ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} extends Aggregate<${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id> implements ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface {",
      "\tprivate constructor(id: ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id) {",
      "\t\tsuper(id);",
      "\t}",
      "",
      "\tstatic of(id: ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id): ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(id);",
      "\t}",
      "",
      "\tstatic from(entity: ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface): ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} {",
      "\t\treturn new ${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}(${TM_FILENAME_BASE/((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id.from(entity.id));",
      "\t}",
      "}",
      ""
    ],
    "description": "Generate a aggregate"
  },
  "Aggregate test": {
    "prefix": "ddd-test-aggregate",
    "body": [
      "import { default as test } from 'ava';",
      "import { ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g} } from './${TM_FILENAME_BASE/.spec//gi}';",
      "import { ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id } from './${TM_FILENAME_BASE/.spec//gi}-id';",
      "",
      "test('should instance of', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.of(${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Id.generate());",
      "",
      "\t// then",
      "\tt.assert(instance);",
      "\t\tt.assert(instance.id);",
      "});",
      "",
      "test('should instance from interface', (t) => {",
      "\t// when",
      "\tconst instance = ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.from({ id: { value: 'uuid' } });",
      "",
      "\t// then",
      "\tt.assert(instance);",
      "\t\tt.assert(instance.id);",
      "});",
      ""
    ],
    "description": "Generate a identifier test"
  },
  "Getter/Setter": {
    "prefix": ["ddd-getter-setter", "ddd-get-set"],
    "body": [
      "private _${1:propertyName}: ${2:propertyType};",
      "get ${1:propertyName}(): ${2:propertyType} {",
      "\treturn this._${1:propertyName};",
      "}",
      "set ${1:propertyName}(${1:propertyName}: ${2:propertyType}) {",
      "\tthis._${1:propertyName} = ${1:propertyName};",
      "}",
      ""
    ],
    "description": "Generate getter and setter"
  },
  "Getter": {
    "prefix": ["ddd-getter", "ddd-get"],
    "body": [
      "private _${1:propertyName}: ${2:propertyType};",
      "get ${1:propertyName}(): ${2:propertyType} {",
      "\treturn this._${1:propertyName};",
      "}",
      ""
    ],
    "description": "Generate getter"
  },
  "From Array": {
    "prefix": "ddd-from-array",
    "body": [
      "static fromArray(entities: ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}Interface[]): ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}[] {",
      "\treturn entities",
      "\t\t? entities.map((entity) => ${TM_FILENAME_BASE/\\.spec$|((^[a-z])|-([a-z]))/${2:/upcase}${3:/upcase}/g}.from(entity))",
      "\t\t: undefined;",
      "}"
    ],
    "description": "Generate static method: fromArray"
  }
}
